import {
  LitElement,
  html,
} from "https://unpkg.com/lit-element@2.0.1/lit-element.js?module";

import "./gauge.min.js?module";

class EasyCareCard extends LitElement {
    static get properties() {
        return {
            hass: {},
            config: {},
        };
    }

    render() {
        if (!this.config || !this.hass) {
            return html``;
        }

        const poolDetailObj = this.hass.states["sensor.pool_detail"];
        return html`
            <ha-card>
                <div style="min-width:300px; min-height:200px">
                    <canvas width="70" height="70" id="phGauge"></ canvas>
                </div>
            </ha-card>
        `;
    }

    firstUpdated(changedProperties) {
        this.createPhGauge(this.shadowRoot.getElementById("phGauge"));
    }

    createPhGauge(target) {
        var opts = {
            angle: 0 , // The span of the gauge arc
            lineWidth: 0.25, // The line thickness
            radiusScale: 0.50, // Relative radius
            pointer: {
              length: 0.52, // // Relative to gauge radius
              strokeWidth: 0.04, // The thickness
              color: '#000000' // Fill color
            },
            limitMax: false,     // If false, max value increases automatically if value > maxValue
            limitMin: false,     // If true, the min value of the gauge will be fixed
            colorStart: '#6F6EA0',   // Colors
            colorStop: '#C0C0DB',    // just experiment with them
            strokeColor: '#EEEEEE',  // to see which ones work best for you
            generateGradient: true,
            highDpiSupport: true,     // High resolution support
            staticLabels: {
              font: "10px sans-serif",  // Specifies font
              labels: [],  // Print labels at these values
              color: "#000000",  // Optional: Label text color
              fractionDigits: 0  // Optional: Numerical precision. 0=round off.

            }
        };
        var gauge = new Gauge(target).setOptions(opts); // create sexy gauge!
        gauge.maxValue = 3000; // set max gauge value
        gauge.setMinValue(0);  // Prefer setter over gauge.minValue = 0
        gauge.animationSpeed = 32; // set animation speed (32 is default value)
        gauge.set(1250); // set actual value
        console.log("Gaauge Done");
    }

    setConfig(config) {
        if (!config.entity) {
            throw new Error("You need to define entities");
        }
        this.config = config;
    }

    // The height of your card. Home Assistant uses this to automatically
    // distribute all cards over the available columns.
    getCardSize() {
        return this.config.entities.length + 1;
    }

}
customElements.define("easy-care-card", EasyCareCard);